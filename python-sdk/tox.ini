[tox]
minversion = 4.0
envlist = 
    py{39,310,311,312}
    lint
    type
    security
    docs
    coverage
isolated_build = true
skip_missing_interpreters = true

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
deps = 
    pytest>=7.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.0
    pytest-mock>=3.10
    pytest-xdist>=3.0
    httpx>=0.24.0
    respx>=0.20.0
commands = 
    pytest {posargs:tests/}
setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}

[testenv:py{39,310,311,312}]
description = Run unit tests with Python {basepython}
commands = 
    pytest tests/ -v --tb=short {posargs}

[testenv:lint]
description = Run linting checks
skip_install = true
deps =
    ruff>=0.1.0
    black>=23.0
    isort>=5.12
commands =
    ruff check src tests examples
    black --check src tests examples
    isort --check-only src tests examples

[testenv:format]
description = Format code
skip_install = true
deps =
    ruff>=0.1.0
    black>=23.0
    isort>=5.12
commands =
    ruff check --fix src tests examples
    black src tests examples
    isort src tests examples

[testenv:type]
description = Run type checking
deps =
    mypy>=1.5
    types-requests
    types-python-dateutil
commands =
    mypy src/dataapi

[testenv:security]
description = Run security checks
skip_install = true
deps =
    bandit[toml]>=1.7
    safety>=2.3
commands =
    bandit -r src/ -f json
    safety check

[testenv:docs]
description = Build documentation
changedir = docs
deps =
    sphinx>=7.0
    sphinx-rtd-theme>=1.3
    sphinx-autodoc-typehints>=1.24
    myst-parser>=2.0
commands =
    sphinx-build -W -b html . _build/html
    sphinx-build -W -b linkcheck . _build/linkcheck

[testenv:docs-serve]
description = Build and serve documentation
changedir = docs
deps =
    {[testenv:docs]deps}
    sphinx-autobuild>=2021.3
commands =
    sphinx-autobuild . _build/html --host 0.0.0.0 --port 8000

[testenv:coverage]
description = Run tests with coverage
deps =
    {[testenv]deps}
    coverage[toml]>=7.0
commands =
    coverage erase
    pytest --cov=src/dataapi --cov-report=term-missing --cov-report=html --cov-report=xml
    coverage report --fail-under=80

[testenv:coverage-report]
description = Generate coverage report
skip_install = true
deps =
    coverage[toml]>=7.0
commands =
    coverage combine
    coverage report --show-missing
    coverage html
    coverage xml

[testenv:integration]
description = Run integration tests
passenv = 
    DATAAPI_*
    CI
commands =
    pytest tests/ -m "integration" -v --tb=short {posargs}

[testenv:performance]
description = Run performance tests
passenv = 
    DATAAPI_*
    CI
deps =
    {[testenv]deps}
    pytest-benchmark>=4.0
commands =
    pytest tests/ -m "slow" --benchmark-only --benchmark-sort=mean {posargs}

[testenv:build]
description = Build package
skip_install = true
deps =
    build>=0.10
    twine>=4.0
commands =
    python -m build
    twine check dist/*

[testenv:publish]
description = Publish package to PyPI
skip_install = true
passenv = 
    TWINE_*
deps =
    {[testenv:build]deps}
commands =
    {[testenv:build]commands}
    twine upload dist/*

[testenv:publish-test]
description = Publish package to Test PyPI
skip_install = true
passenv = 
    TWINE_*
deps =
    {[testenv:build]deps}
commands =
    {[testenv:build]commands}
    twine upload --repository testpypi dist/*

[testenv:clean]
description = Clean up build artifacts
skip_install = true
deps =
commands =
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('src/dataapi_client.egg-info', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.mypy_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.ruff_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('docs/_build', ignore_errors=True)"

[testenv:dev]
description = Development environment
usedevelop = true
deps =
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:docs]deps}
    ipython>=8.0
    jupyter>=1.0
    pre-commit>=3.0
commands =
    python -c "print('Development environment ready!')"
    python -c "print('Available commands:')"
    python -c "print('  pytest tests/ - Run tests')"
    python -c "print('  mypy src/ - Type checking')"
    python -c "print('  ruff check src/ - Linting')"
    python -c "print('  black src/ - Code formatting')"
    python -c "print('  sphinx-build docs docs/_build/html - Build docs')"

# Test environments for specific scenarios
[testenv:test-minimal]
description = Test with minimal dependencies
deps =
    pytest>=7.0
    httpx>=0.24.0
commands =
    pytest tests/test_client.py tests/test_config.py -v

[testenv:test-async]
description = Test async functionality
deps =
    {[testenv]deps}
commands =
    pytest tests/ -k "async" -v

[testenv:test-auth]
description = Test authentication
deps =
    {[testenv]deps}
commands =
    pytest tests/ -m "auth" -v

[testenv:test-network]
description = Test network functionality
passenv = 
    DATAAPI_*
    CI
deps =
    {[testenv]deps}
commands =
    pytest tests/ -m "network" -v

# Matrix testing
[testenv:py{39,310,311,312}-{minimal,full}]
deps =
    minimal: pytest>=7.0
    minimal: httpx>=0.24.0
    full: {[testenv]deps}
commands =
    pytest tests/ -v

# Platform-specific testing
[testenv:windows]
platform = win32
commands =
    pytest tests/ -v --tb=short

[testenv:macos]
platform = darwin
commands =
    pytest tests/ -v --tb=short

[testenv:linux]
platform = linux
commands =
    pytest tests/ -v --tb=short

# Configuration sections
[pytest]
addopts = 
    --strict-markers
    --strict-config
    --disable-warnings
    -ra
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow tests
    network: Tests requiring network access
    auth: Authentication tests
    database: Database tests
    ai: AI service tests
    workflow: Workflow tests

[coverage:run]
source = src/dataapi
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */.*
branch = true

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
show_missing = true
precision = 2

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml