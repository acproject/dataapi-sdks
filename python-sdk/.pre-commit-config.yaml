# Pre-commit hooks configuration
# See https://pre-commit.com for more information

repos:
  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: \.md$
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ['--pytest-test-first']
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=88']

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile=black', '--line-length=88']

  # Linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: ['--fix', '--exit-non-zero-on-fix']
      - id: ruff-format

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-python-dateutil
          - pydantic
          - httpx
        args: ['--ignore-missing-imports', '--strict']
        files: ^src/

  # Security linting
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', 'src/', '-f', 'json']
        exclude: tests/

  # Documentation
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: ['--convention=google']
        files: ^src/

  # Dependency scanning
  - repo: https://github.com/pyupio/safety
    rev: 2.3.5
    hooks:
      - id: safety
        args: ['--json']

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types: [yaml]
        exclude: ^\.github/

  # Markdown formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: ['--fix']
        exclude: CHANGELOG.md

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  # License headers
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - '#'

# Configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# Local hooks for project-specific checks
repos:
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest-check
        entry: uv run pytest
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]
        args: ['tests/', '--tb=short', '-q']

      - id: coverage-check
        name: coverage-check
        entry: uv run pytest
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]
        args: ['--cov=src/dataapi', '--cov-fail-under=80', '--cov-report=term-missing']

      - id: build-check
        name: build-check
        entry: uv build
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]

      - id: version-check
        name: version-check
        entry: python scripts/check_version.py
        language: system
        pass_filenames: false
        files: ^(pyproject\.toml|src/dataapi/__init__\.py)$

      - id: api-docs-check
        name: api-docs-check
        entry: uv run sphinx-build
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]
        args: ['-W', '-b', 'html', 'docs', 'docs/_build/html']

      - id: example-check
        name: example-check
        entry: python scripts/validate_examples.py
        language: system
        pass_filenames: false
        files: ^examples/
        stages: [commit]

      - id: changelog-check
        name: changelog-check
        entry: python scripts/check_changelog.py
        language: system
        pass_filenames: false
        files: ^CHANGELOG\.md$
        stages: [commit]

# Exclude patterns
exclude: |
  (?x)^(
      \.git/.*|
      \.venv/.*|
      __pycache__/.*|
      \.pytest_cache/.*|
      \.mypy_cache/.*|
      \.ruff_cache/.*|
      dist/.*|
      build/.*|
      \.tox/.*|
      docs/_build/.*|
      node_modules/.*|
      \.DS_Store|
      Thumbs\.db
  )$